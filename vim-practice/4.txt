c - i - ( will change inside brackets...change all inside brackets to x
4:10

function compileFile(file) {
  // ensure file exists
  fs.lstat(file, function(err, stat){
    if (err) throw err;
    // file
    if (stat.isFile()) {
      fs.readFile(file, 'utf8', function(err, str){
        if (err) throw err;
        options.filename = file;
        options._imports = [];
        var style = stylus(str, options);
        if (includeCSS) style.set('include css', true);
        usePlugins(style);
        importFiles(style);
        style.render(function(err, css){
          watchImports(file, options._imports);
          if (err) {
            if (watchers) {
              console.error(err.stack || err.message);
            } else {
              throw err;
            }
          } else {
            writeFile(file, css);
          }
        });
      });
    // directory
    } else if (stat.isDirectory()) {
      fs.readdir(file, function(err, files){
        if (err) throw err;
        files.filter(function(path){
          return path.match(/\.styl$/);
        }).map(function(path){
          return join(file, path);
        }).forEach(compileFile);
      });
    }
  });
}
function compileFile(file) {
  // ensure file exists
  fs.lstat(file, function(err, stat){
    if (err) throw err;
    // file
    if (stat.isFile()) {
      fs.readFile(file, 'utf8', function(err, str){
        if (err) throw err;
        options.filename = file;
        options._imports = [];
        var style = stylus(str, options);
        if (includeCSS) style.set('include css', true);
        usePlugins(style);
        importFiles(style);
        style.render(function(err, css){
          watchImports(file, options._imports);
          if (err) {
            if (watchers) {
              console.error(err.stack || err.message);
            } else {
              throw err;
            }
          } else {
            writeFile(file, css);
          }
        });
      });
    // directory
    } else if (stat.isDirectory()) {
      fs.readdir(file, function(err, files){
        if (err) throw err;
        files.filter(function(path){
          return path.match(/\.styl$/);
        }).map(function(path){
          return join(file, path);
        }).forEach(compileFile);
      });
    }
  });
}
